# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for Gel via `mix gel.generate` from
#   `<%= @query.file %>`.
defmodule <%= @query.module %> do
  @query """
<%= String.trim_trailing(@query.query, "\n") %>
"""

  @moduledoc """
  Generated module for the EdgeQL query from
    `<%= @query.file %>`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "<%= @query.file %>"

  <%= for {type_name, {typedoc, typespec}} <- @query.types do %>
  @typedoc """
  ```edgeql
  <%= typedoc %>
  ```
  """
  @type <%= type_name %> :: <%= typespec %>
  <% end %>

  <%= if Gel.EdgeQL.Generator.Shape.complex?(@query.shape) do %>
  <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :module, @opts) %>
  <% end %>

  <%= if @query.args.is_positional do %>

  @doc """
  Run the query.
  """
  @spec query(
    client :: Gel.client(),
    <%= Gel.EdgeQL.Generator.Render.render(@query.args, :spec, @opts) %>,
    opts :: list(Gel.query_option())
  ) :: {:ok, <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>} | {:error, reason} when reason: any()
  def query(client, <%= Gel.EdgeQL.Generator.Render.render(@query.args, :args, @opts) %>, opts \\ []) do
    args = [<%= Gel.EdgeQL.Generator.Render.render(@query.args, :args, @opts) %>]
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: Gel.client(),
    <%= Gel.EdgeQL.Generator.Render.render(@query.args, :spec, @opts) %>,
    opts :: list(Gel.query_option())
  ) :: <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>
  def query!(client, <%= Gel.EdgeQL.Generator.Render.render(@query.args, :args, @opts) %>, opts \\ []) do
    args = [<%= Gel.EdgeQL.Generator.Render.render(@query.args, :args, @opts) %>]

    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  <%= if @query.args.is_named do %>

  @type keyword_args() :: <%= Gel.EdgeQL.Generator.Render.render(@query.args, {:typespec, :keyword}, @opts) %>
  @type map_args() :: <%= Gel.EdgeQL.Generator.Render.render(@query.args, {:typespec, :map}, @opts) %>
  @type args() :: map_args() | keyword_args()

  @doc """
  Run the query.
  """
  @spec query(
    client :: Gel.client(),
    args :: args(),
    opts :: list(Gel.query_option())
  ) :: {:ok, <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>} | {:error, reason} when reason: any()
  def query(client, args, opts \\ []) do
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: Gel.client(),
    args :: args(),
    opts :: list(Gel.query_option())
  ) :: <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>
  def query!(client, args, opts \\ []) do
    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  <%= if @query.args.is_empty do %>

  @doc """
  Run the query.
  """
  @spec query(
    client :: Gel.client(),
    opts :: list(Gel.query_option())
  ) :: {:ok, <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>} | {:error, reason} when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
    client :: Gel.client(),
    opts :: list(Gel.query_option())
  ) :: <%= Gel.EdgeQL.Generator.Render.render(@query.shape, :typespec, @opts) %>
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  <% end %>

  <%= Gel.EdgeQL.Generator.Handler.handle(@query, @opts) %>
end
