# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for Gel via `mix gel.generate` from
#   `test/support/codegen/edgeql/types/select/links/convertors.edgeql`.
defmodule Tests.Codegen.Queries.Types.Select.Links.Convertors do
  @query """
  select v6::codegen::Aggregate {
      rl_number: {
          rl_int64: {
              rp_int64,
              rp_int64_type,
          }
      },
      rl_tuple: {
          rl_unnamed_tuple: {
              rp_unnamed_tuple,
          },
          rl_named_tuple: {
              rp_named_tuple,
          }
      }
  }
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/types/select/links/convertors.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/types/select/links/convertors.edgeql"

  @typedoc """
  ```edgeql
  scalar type v6::codegen::Int64Type extending std::int64
  ```
  """
  @type v6__codegen__int64_type() :: integer()

  @typedoc """
  ```edgeql
  scalar type v6::codegen::EnumType extending enum<A, B, C>
  ```
  """
  @type v6__codegen__enum_type() :: :A | :B | :C

  defmodule Result do
    @moduledoc false

    defmodule RlNumber do
      @moduledoc false

      defmodule RlInt64 do
        @moduledoc false

        defstruct [
          :rp_int64,
          :rp_int64_type
        ]

        @type t() :: %__MODULE__{
                rp_int64: integer(),
                rp_int64_type:
                  Tests.Codegen.Queries.Types.Select.Links.Convertors.v6__codegen__int64_type()
              }
      end

      defstruct [
        :rl_int64
      ]

      @type t() :: %__MODULE__{
              rl_int64: RlInt64.t()
            }
    end

    defmodule RlTuple do
      @moduledoc false

      defmodule RlUnnamedTuple do
        @moduledoc false

        defstruct [
          :rp_unnamed_tuple
        ]

        @type t() :: %__MODULE__{
                rp_unnamed_tuple:
                  {String.t(), boolean(),
                   {String.t(), boolean(),
                    Tests.Codegen.Queries.Types.Select.Links.Convertors.v6__codegen__enum_type()}}
              }
      end

      defmodule RlNamedTuple do
        @moduledoc false

        defstruct [
          :rp_named_tuple
        ]

        @type t() :: %__MODULE__{
                rp_named_tuple: %{
                  a: String.t(),
                  b: boolean(),
                  c: %{
                    a: String.t(),
                    b: boolean(),
                    c:
                      Tests.Codegen.Queries.Types.Select.Links.Convertors.v6__codegen__enum_type()
                  }
                }
              }
      end

      defstruct [
        :rl_unnamed_tuple,
        :rl_named_tuple
      ]

      @type t() :: %__MODULE__{
              rl_unnamed_tuple: RlUnnamedTuple.t(),
              rl_named_tuple: RlNamedTuple.t()
            }
    end

    defstruct [
      :rl_number,
      :rl_tuple
    ]

    @type t() :: %__MODULE__{
            rl_number: RlNumber.t(),
            rl_tuple: RlTuple.t()
          }
  end

  @doc """
  Run the query.
  """
  @spec query(
          client :: Gel.client(),
          opts :: list(Gel.query_option())
        ) :: {:ok, [Result.t()]} | {:error, reason}
        when reason: any()
  def query(client, opts \\ []) do
    do_query(client, [], opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: Gel.client(),
          opts :: list(Gel.query_option())
        ) :: [Result.t()]
  def query!(client, opts \\ []) do
    case do_query(client, [], opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    with {:ok, set} <- Gel.query(client, @query, args, opts) do
      result =
        for element <- set do
          %Result{
            rl_number:
              with link <- element["rl_number"] do
                %Result.RlNumber{
                  rl_int64:
                    with link <- link["rl_int64"] do
                      %Result.RlNumber.RlInt64{
                        rp_int64: link["rp_int64"],
                        rp_int64_type: link["rp_int64_type"]
                      }
                    end
                }
              end,
            rl_tuple:
              with link <- element["rl_tuple"] do
                %Result.RlTuple{
                  rl_unnamed_tuple:
                    with link <- link["rl_unnamed_tuple"] do
                      %Result.RlTuple.RlUnnamedTuple{
                        rp_unnamed_tuple:
                          with property <- link["rp_unnamed_tuple"] do
                            with {
                                   element_0,
                                   element_1,
                                   element_2
                                 } <- property do
                              {
                                element_0,
                                element_1,
                                with element <- element_2 do
                                  with {
                                         element_0,
                                         element_1,
                                         element_2
                                       } <- element do
                                    {
                                      element_0,
                                      element_1,
                                      with element <- element_2 do
                                        case element do
                                          "A" -> :A
                                          "B" -> :B
                                          "C" -> :C
                                        end
                                      end
                                    }
                                  end
                                end
                              }
                            end
                          end
                      }
                    end,
                  rl_named_tuple:
                    with link <- link["rl_named_tuple"] do
                      %Result.RlTuple.RlNamedTuple{
                        rp_named_tuple:
                          with property <- link["rp_named_tuple"] do
                            %{
                              a: property["a"],
                              b: property["b"],
                              c:
                                with element <- property["c"] do
                                  %{
                                    a: element["a"],
                                    b: element["b"],
                                    c:
                                      with element <- element["c"] do
                                        case element do
                                          "A" -> :A
                                          "B" -> :B
                                          "C" -> :C
                                        end
                                      end
                                  }
                                end
                            }
                          end
                      }
                    end
                }
              end
          }
        end

      {:ok, result}
    end
  end
end
