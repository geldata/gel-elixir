# AUTOGENERATED: DO NOT MODIFY
# Generated by Elixir client for Gel via `mix gel.generate` from
#   `test/support/codegen/edgeql/primitives/scalars/cal/local_date/custom/positional.required.edgeql`.
defmodule Tests.Codegen.Queries.Primitives.Scalars.Cal.LocalDate.Custom.Positional.Required do
  @query """
  select <v6::codegen::CalLocalDateType>$0
  """

  @moduledoc """
  Generated module for the EdgeQL query from
    `test/support/codegen/edgeql/primitives/scalars/cal/local_date/custom/positional.required.edgeql`.

  Query:

  ```edgeql
  #{@query}
  ```
  """

  @query_file "test/support/codegen/edgeql/primitives/scalars/cal/local_date/custom/positional.required.edgeql"

  @typedoc """
  ```edgeql
  scalar type v6::codegen::CalLocalDateType extending cal::local_date
  ```
  """
  @type v6__codegen__cal_local_date_type() :: Date.t()

  @doc """
  Run the query.
  """
  @spec query(
          client :: Gel.client(),
          arg_0 :: v6__codegen__cal_local_date_type(),
          opts :: list(Gel.query_option())
        ) :: {:ok, v6__codegen__cal_local_date_type()} | {:error, reason}
        when reason: any()
  def query(client, arg_0, opts \\ []) do
    args = [arg_0]
    do_query(client, args, opts)
  end

  @doc """
  Run the query.
  """
  @spec query!(
          client :: Gel.client(),
          arg_0 :: v6__codegen__cal_local_date_type(),
          opts :: list(Gel.query_option())
        ) :: v6__codegen__cal_local_date_type()
  def query!(client, arg_0, opts \\ []) do
    args = [arg_0]

    case do_query(client, args, opts) do
      {:ok, result} ->
        result

      {:error, exc} ->
        raise exc
    end
  end

  defp do_query(client, args, opts) do
    opts = Keyword.merge(opts, __file__: @query_file)

    Gel.query_required_single(client, @query, args, opts)
  end
end
